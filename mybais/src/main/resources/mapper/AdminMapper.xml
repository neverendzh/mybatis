<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kaishengit.mapper.AdminMapper"><!---->

    <!--其中id相当云方法名，parameterType相当于传递的参数，需要写类的完全限定名。-->
    <!--其中useGenerateKeys是用于在保存时，自动生成的主键值，封装到传入对象的某个属性上。其中KeyProperty就是设置要把生成的
    主键方到parameterTyped对应的对象上的属性为id，也就是Admin属性的属性id。-->
    <insert id="save" parameterType="admin" useGeneratedKeys="true" keyProperty="id"><!--配置的别名不是完全限定名，在这个标签执行时对应在mybatis.xml文件中配置的别名，也就是央射到一个实体类-->
        insert into admin(admin_name,admin_password)
        values(#{adminName},#{adminPassword})
    </insert>

    <resultMap id="adminMap" type="admin"><!--type类型是admin类型,这个是定义封装的类型-->
        <id column="id" property="id"/>
        <result column="admin_name" property="adminName"/>
        <result column="admin_password" property="adminPassword"/>
    </resultMap>
<!--如果findAll使用的resultMap的形式封装的就不需要指定resultType的返回类型，应该使用resultMap-->
    <select id="findAll" resultMap="adminMap"><!--resultType是返回类型，他会自动判断返回的类型，如果是多个就是集合型式返回-->
       SELECT
            id,
            admin_name,
            admin_password
        FROM
            admin
    </select>

    <select id="findById" parameterType="long" resultType="admin"><!--parameterType是传入的数据类型-->
        SELECT
            id,
            admin_name,
            admin_password
        FROM
            admin
        WHERE
            id=#{id}
    </select>

    <!--<select id="page" parameterType="map" resultType="admin">-->
        <!--SELECT-->
            <!--id,-->
            <!--admin_name,-->
            <!--admin_password-->
        <!--FROM-->
            <!--admin-->
        <!--limit-->
            <!--#{offset},#{size}-->
    <!--</select>-->

    <!--<select id="page" parameterType="map" resultType="admin">
        SELECT
        id,
        admin_name,
        admin_password
        FROM
        admin
        limit
        #{arg0},#{arg1}
    </select>-->

    <select id="page" parameterType="map" resultType="admin">
        SELECT
        id,
        admin_name,
        admin_password
        FROM
        admin
        limit
        #{offset},#{size}
    </select>
    
    <update id="update" parameterType="admin"><!--parameterType传入一个对象-->
        UPDATE  admin
        set admin_name = #{adminName},admin_password = #{adminPassword}
        WHERE
            id=#{id}

    </update>

    <delete id="delete" parameterType="long">
        DELETE  FROM  admin WHERE id = #{id}
    </delete>

    <delete id="deleteName" parameterType="String">
        DELETE  FROM admin WHERE admin_name = #{name}
    </delete>
</mapper>