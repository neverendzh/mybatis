<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kaishengit.mapper.AccountMapper">
    <!--用于把dept对象疯封装到Account对象中，设置封装的对应关系-->
    <resultMap id="userMap" type="com.kaishengit.entity.Account">
        <id column="id" property="id"/>
        <result column="user_name" property="userName"/>
        <result column="password" property="password"/>
        <result column="address" property="address"/>
        <result column="dept_id" property="deptId"/>
        <!--property=dept是配置Account对象中的dept属性
        javaType=dept是表示这个类型是一个Dept对象
        -->
        <association property="dept" javaType="dept">
            <id column="dept_id" property="id"/>
            <result column="dept_department" property="deptDepartment"/>
        </association>
    </resultMap>
    <select id="findById" parameterType="long" resultMap="userMap">
        SELECT
            t_account.id,
            user_name,
            address,
            PASSWORD,
            dept_id,
            dept_department
        FROM
            t_account
        LEFT JOIN t_dept ON t_account.dept_id = t_dept.id
        WHERE
            t_account.id = #{id}
    </select>

   <!--对象图导航语言-->
    <select id="findById2" parameterType="long" resultType="account">
        SELECT
        t_account.id,
        user_name,
        address,
        PASSWORD,
        t_dept.id,
        t_dept.id as 'dept.id',
        dept_department as 'dept.deptDepartment'
        FROM
        t_account
        LEFT JOIN t_dept ON t_account.dept_id = t_dept.id
        WHERE
        t_account.id = #{id}
    </select>
</mapper>